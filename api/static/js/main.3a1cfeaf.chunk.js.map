{"version":3,"sources":["apollo/store/base.ts","apollo/config.ts","components/ProtectedRoute.tsx","components/AdminPageRoute.tsx","apollo/store/user.ts","graphql/queries/user.ts","graphql/queries/access.ts","graphql/queries/restaurant.ts","graphql/queries/meal.ts","graphql/queries/holiday.ts","helpers/history.ts","graphql/mutations/user.ts","graphql/mutations/meal.ts","graphql/mutations/holiday.ts","components/Layout/Layout.tsx","components/Login/Login.tsx","utils/formatDate.ts","utils/stringToColor.ts","utils/axiosClient.ts","components/Access/Access.tsx","components/Holiday/Holiday.tsx","components/Meal/RestaurantList.tsx","components/Meal/MealList.tsx","components/Meal/Meal.tsx","components/Account/Account.tsx","containers/AccessContainer.tsx","containers/HolidayContainer.tsx","containers/LoginContainer.tsx","containers/MealContainer.tsx","components/Register/Register.tsx","containers/RegisterContainer.tsx","containers/AccountContainer.tsx","App.tsx","apollo/client.ts","index.tsx"],"names":["GET_LOCAL_STATE","gql","SET_LOCAL_STATE","JWT","TOKEN","NAME","REFRESH_TOKEN","ProtectedRoute","props","localStorage","getItem","to","pathname","AdminPageRoute","JSON","parse","level","LocalUserInitialState","user","id","name","email","annual","alternative","enterDate","isJoin","GET_LOCAL_USER","USERS","USER","ME","ACCESS","LAST_ACCESS","RESTAURANTS","MEAL_LIST","HOLIDAYS","MY_HOLIDAYS","history","createBrowserHistory","USER_LOGIN","USER_CHANGE_PASSWORD","USER_CREATE","USER_RESET_PASSWORD","USER_UPDATE","MEAL_UPSERT","MEAL_DELETE","HOLIDAY_CREATE","HOLIDAY_UPDATE","HOLIDAY_DELETE","useStyles","makeStyles","createStyles","container","display","flexDirection","width","height","flexWrap","header","borderBottom","alignItems","justifyContent","zIndex","menu","marginRight","body","flex","sidebar","borderRight","all","content","backgroundColor","modal","position","border","top","left","transform","modalTitle","fontSize","lineHeight","textAlign","modalBody","gridItem","textField","Layout","useState","isModal","setIsModal","currentPassword","newPassword","checkNewPassword","changePasswordState","setChangePasswordstate","isDropdown","setIsDropdown","anchorRef","useRef","classes","meData","useQuery","data","localUserData","client","useMutation","variables","changePassword","setLocalState","useEffect","me","readQuery","query","currentUser","writeData","prevOpen","React","current","focus","onClickDropdownClose","e","contains","target","onClickModalOpen","onClickModalClose","onChangePasswordState","value","prevState","onClickLogout","a","clear","push","Fragment","Grid","className","item","src","Button","ref","aria-controls","undefined","aria-haspopup","onClick","Popper","open","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","MenuItem","xs","elevation","Divider","marginTop","marginBottom","Modal","onClose","Box","TextField","type","onChange","required","label","color","then","isOpen","message","severity","catch","err","graphQLErrors","theme","paper","padding","form","spacing","submit","margin","Login","loginState","handleLoginState","handleLogin","Container","component","maxWidth","CssBaseline","Typography","variant","fullWidth","autoComplete","autoFocus","password","onKeyDown","key","formatDate","date","today","Date","year","getFullYear","month","getMonth","day","getDate","length","join","stringToColor","str","i","hash","charCodeAt","colors","baseConfig","timeout","withCredentials","slackAPI","username","url","axios","create","get","config","table","overflowY","background","select","Access","accessDataList","handleSearchState","searchState","lastAccess","usersData","startDate","endDate","userId","localeOptions","hour12","timeStyle","utils","DateFnsUtils","disableToolbar","format","sDate","KeyboardButtonProps","eDate","Select","Number","users","map","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","Object","keys","dayIndex","dayOfTheWeek","hover","scope","onTime","toLocaleDateString","toLocaleTimeString","offTime","workingTime","outTime","inTime","etc","locales","require","calendar","box","marginLeft","borderTop","overflow","footer","Holiday","holidaysDataList","myHolidaysDataList","myHolidayCountState","handleSearchMonth","upsertHolidayState","handleUpsertHolidayState","isDialog","handleModalClose","handleDialogClose","handleDialogConfirm","handleModalConfirm","handleMyHolidayDelete","localizer","dateFnsLocalizer","startOfWeek","getDay","onClickMyHoliday","useCallback","holidayId","selectable","events","views","onNavigate","onSelectSlot","start","end","onSelectEvent","event","title","holidayType","allDay","includes","setDate","popup","List","ListItem","button","ListItemText","primary","text","FormControl","FormLabel","RadioGroup","row","FormControlLabel","control","Radio","Dialog","DialogTitle","DialogActions","titleContainer","deleteContainer","memo","restaurantData","handleSelect","handleDelete","onClickSelectCard","restaurantId","direction","restaurants","restaurant","Card","CardActionArea","CardContent","mealByRestaurant","meal","find","mbr","lunch","dinner","Meal","Account","updateUserState","handleFetchUserState","handleUpdateUserState","handleResetPassword","onClickModify","onChangeUpdateUserState","slice","String","AccessContainer","setAccessDataList","setLastAccess","dayOfWeekIndex","thisWeekStartDate","thisWeekEndDate","getThisWeek","setSearchState","useLazyQuery","fetchPolicy","execute","accessData","lastAccessData","prev","timestamp","toString","replace","split","accessRawDataArray","accessRawData","access","accessLog","accessType","isToday","temp","pop","weekIndex","rawDataArray","firstAccess","idx","getTime","hours","Math","floor","minutes","workingTimeCalculator","HolidayContainer","setIsDialog","substring","searchMonth","setsearchMonth","setUpsertHolidayState","deleteHolidayId","setDeleteHolidayId","setHolidaysDataList","setMyHolidaysDataList","setMyHolidayCountState","myHolidaysData","myHolidaysRefetch","refetch","holidaysData","holidaysRefetch","holidayCreate","holidayUpdate","holidayDelete","holidays","raw","prefix","myHolidays","dateString","LoginContainer","setLoginState","login","MealContainer","setMealByRestaurant","mealType","mealUpsertState","setMealUpsertState","deleteState","setDeleteState","mealDataList","mealUpsert","mealDelete","mealList","mealData","mealRawData","currentHours","getHours","registerContainer","paddingLeft","paddingRight","slackButton","createUserState","handleCreateUserState","handleUserCreate","findSlackId","onChangeCreateUserState","slackId","disabled","RegisterContainer","setCreateUserState","userCreate","finally","res","AccountContainer","setUpdateUserState","userFetch","userData","usersRefetch","userUpdate","userResetPassword","App","localStateData","handleSnackbarClose","reason","snackbar","exact","path","Snackbar","autoHideDuration","Alert","cache","InMemoryCache","freezeResults","addTypename","initialState","httpLink","HttpLink","uri","credentials","authMiddlewareLink","setContext","_","headers","token","refreshToken","decodedToken","decode","Exception","currentTime","now","valueOf","exp","decodedRefreshToken","refreshOpts","method","authorization","stringify","fetch","json","refreshData","userRefresh","setItem","console","log","afterwareLink","ApolloLink","operation","forward","response","userLogin","refresh","errorLink","onError","networkError","error","locations","links","from","ApolloClient","link","connectToDevTools","queryDeduplication","assumeImmutableResults","resolvers","Mutation","dotenv","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a1cfeaf.chunk.js","sourcesContent":["import gql from 'graphql-tag'\n\nexport interface SnackbarInterface {\n  isOpen: boolean,\n  message: String,\n  severity: 'success' | 'info' | 'warning' | 'error'\n}\n\nexport interface LocalStateInterface {\n  snackbar: SnackbarInterface,\n}\n\nexport const LocalInitialState: LocalStateInterface = {\n  snackbar: {\n    isOpen: false,\n    message: '',\n    severity: 'info'\n  },\n}\n\nexport const GET_LOCAL_STATE = gql`\n  query getLocalState {\n    snackbar {\n      isOpen @client\n      message @client\n      severity @client\n    }\n  }\n`\n\nexport const SetLocalState = {\n  setLocalState: (_: any, variables: SnackbarInterface, { cache }: any) => {\n    cache.writeData({\n      data: {\n        snackbar: {\n          isOpen: variables.isOpen,\n          message: variables.message,\n          severity: variables.severity\n        }\n      }\n    })\n    return null\n  }\n}\n\nexport const SET_LOCAL_STATE = gql`\n  mutation setLocalState(\n    $isOpen: Boolean,\n    $message: String,\n    $severity: String\n  ){\n    setLocalState (\n      isOpen: $isOpen,\n      message: $message,\n      severity: $severity\n    ) @client\n  }\n`","export const GRAPHQL_ENDPOINT = `http://192.168.0.151:5005/graphql`\nexport const JWT = {\n  HEADER: {\n    TOKEN: {\n      NAME: 'x-connector-token'\n    },\n    REFRESH_TOKEN: {\n      NAME: 'x-connector-refresh-token'\n    }\n  },\n  LOCAL_STORAGE: {\n    TOKEN: {\n      NAME: 'connectorToken'\n    },\n    REFRESH_TOKEN: {\n      NAME: 'connectorRefreshToken'\n    }\n  }\n}\n","import React from 'react'\nimport { Redirect, Route, RouteProps } from 'react-router'\nimport { JWT } from '../apollo/config'\n\nexport const ProtectedRoute: React.FC<RouteProps> = (props) => {\n  if (\n    localStorage.getItem(JWT.LOCAL_STORAGE.TOKEN.NAME) &&\n    localStorage.getItem(JWT.LOCAL_STORAGE.REFRESH_TOKEN.NAME)\n  ) {\n    return <Route {...props} />\n  } else {\n    return <Redirect to={{ pathname: '/login' }} />\n  }\n}","import React from 'react'\nimport { Redirect, Route, RouteProps } from 'react-router'\n\nexport const AdminPageRoute: React.FC<RouteProps> = (props) => {\n  const currentUser = JSON.parse(localStorage.getItem('currentUser') || '')\n  const { level } = currentUser\n  if (level) {\n    return <Route {...props} />\n  } else {\n    return <Redirect to={{ pathname: '/' }} />\n  }\n}","import gql from 'graphql-tag'\nimport { UserType } from '../../interfaces'\n\nexport interface LocalUserInterface {\n  user: UserType\n}\n\nexport const LocalUserInitialState: LocalUserInterface = {\n  user: {\n    id: 0,\n    name: '',\n    email: '',\n    level: 0,\n    annual: 0,\n    alternative: 0,\n    enterDate: '1970-01-01T00:00:00',\n    isJoin: true\n  }\n}\n\nexport const GET_LOCAL_USER = gql`\n  query getUser {\n    user{\n      name @client\n      email @client\n      level @client\n      enterDate @client\n      isJoin @client\n    }\n  }\n`\n","import gql from 'graphql-tag'\n\nexport const USERS = gql`\n  query users {\n    users{\n      id\n      email\n      name\n      level\n      annual\n      alternative\n      enterDate\n      isJoin\n    }\n  }\n`\n\nexport const USER = gql`\n  query(\n    $userId: Int!\n  ){\n    user(\n      userId: $userId\n    ){\n      id\n      email\n      name\n      level\n      annual\n      alternative\n      enterDate\n      isJoin\n    }\n  }\n`\n\nexport const ME = gql`\n  query {\n    me{\n      id\n      email\n      name\n      level\n      annual\n      alternative\n      enterDate\n      isJoin\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const ACCESS = gql`\n  query (\n    $startDate: Date!,\n    $endDate: Date!,\n    $userId: Int\n  ){\n    access(\n      startDate: $startDate,\n      endDate: $endDate,\n      userId: $userId\n    ){\n      timestamp\n      accessType\n    }\n  }\n`\n\nexport const LAST_ACCESS = gql`\n  query{\n    lastAccess{\n      timestamp\n      accessType\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const RESTAURANTS = gql`\n  query {\n    restaurants {\n      id\n      name\n      billType\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const MEAL_LIST = gql`\n  query(\n    $date: Date!\n  ){\n    mealList(date: $date){\n      mealType\n      restaurantId\n      user{\n        name\n      }\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const HOLIDAYS = gql`\n  query(\n    $searchMonth: Date!\n  ){\n    holidays(\n      searchMonth: $searchMonth\n    ){\n      id\n      startDate\n      endDate\n      holidayType\n      user{\n        name\n      }\n    }\n  }\n`\n\nexport const MY_HOLIDAYS = gql`\n  query{\n    myHolidays{\n      id\n      startDate\n      endDate\n      holidayType\n    }\n    me{\n      alternative\n      annual\n    }\n  }\n`","import { createBrowserHistory } from 'history'\n\nexport const history = createBrowserHistory()","import gql from 'graphql-tag'\n\nexport const USER_LOGIN = gql`\n  mutation userLogin(\n    $email: String!,\n    $password: String!\n  ){\n    userLogin(\n      email: $email,\n      password: $password\n    ){\n      access\n      refresh\n      user{\n        id\n        email\n        name\n        level\n        annual\n        alternative\n        enterDate\n        isJoin\n      }\n    }\n}`\n\nexport const USER_CHANGE_PASSWORD = gql`\n  mutation userChangePassword(\n    $currentPassword: String!,\n    $newPassword: String!,\n    $checkNewPassword: String!\n  ){\n    userChangePassword(\n      currentPassword: $currentPassword,\n      newPassword: $newPassword,\n      checkNewPassword: $checkNewPassword\n    ){\n      response\n    }\n  }\n`\n\nexport const USER_CREATE = gql`\n  mutation userCreate(\n    $name: String!,\n    $email: String!,\n    $slackId: String!\n  ){\n    userCreate(\n      name: $name,\n      email: $email,\n      slackId: $slackId,\n    ){\n      user{\n        id\n      }\n    }\n  }\n`\n\nexport const USER_RESET_PASSWORD = gql`\n  mutation userResetPassword(\n    $userId: Int!\n  ){\n    userResetPassword(\n      userId: $userId\n    ){\n      response\n    }\n  }\n`\n\nexport const USER_UPDATE = gql`\n  mutation userUpdate(\n    $userId: Int!,\n    $annual: Float,\n    $alternative: Float,\n    $enterDate: Date,\n    $isJoin: Boolean,\n    $level: Int\n  ){\n    userUpdate(\n      userId: $userId,\n      annual: $annual,\n      alternative: $alternative,\n      enterDate: $enterDate,\n      isJoin: $isJoin,\n      level: $level,\n    ){\n      user{\n        id\n      }\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const MEAL_UPSERT = gql`\n  mutation mealUpsert(\n    $date: Date!,\n    $mealType: String!,\n    $restaurantId: Int!\n  ){\n    mealUpsert(\n      date: $date,\n      mealType: $mealType,\n      restaurantId: $restaurantId\n    ){\n      response\n    }\n  }\n`\n\nexport const MEAL_DELETE = gql`\n  mutation mealDelete(\n    $date: Date!,\n    $mealType: String!\n  ){\n    mealDelete(\n      date: $date,\n      mealType: $mealType,\n    ){\n      response\n    }\n  }\n`","import gql from 'graphql-tag'\n\nexport const HOLIDAY_CREATE = gql`\n  mutation holidayCreate(\n    $startDate: Date!,\n    $endDate: Date!,\n    $holidayType: String!\n  ){\n    holidayCreate(\n      startDate: $startDate,\n      endDate: $endDate,\n      holidayType: $holidayType\n    ){\n      holiday{\n        id\n      }\n    }\n  }\n`\n\nexport const HOLIDAY_UPDATE = gql`\n  mutation holidayUpdate (\n    $holidayId: Int!,\n    $startDate: Date!,\n    $endDate: Date!,\n    $holidayType: String!\n  ){\n    holidayUpdate(\n      holidayId: $holidayId,\n      startDate: $startDate,\n      endDate: $endDate,\n      holidayType: $holidayType\n    ){\n    holiday{\n      id\n    }\n  }\n}\n`\n\nexport const HOLIDAY_DELETE = gql`\n  mutation holidayDelete (\n    $holidayId: Int!\n  ){\n    holidayDelete(\n      holidayId: $holidayId\n    ){\n      response\n    }\n  }\n`","import React, { useRef, useState, ReactNode, useEffect } from 'react'\nimport { Grid, makeStyles, createStyles, Paper, MenuList, MenuItem, Button, Popper, Grow, ClickAwayListener, Modal, TextField, Box, Divider } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\nimport { GET_LOCAL_USER, LocalUserInitialState, LocalUserInterface, SET_LOCAL_STATE, SnackbarInterface } from '../../apollo/store'\nimport { ME } from '../../graphql/queries'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { history } from '../../helpers'\nimport { USER_CHANGE_PASSWORD } from '../../graphql/mutations'\nimport { UserChangePasswordPayload, MeResponse } from '../../interfaces'\n\ninterface Props {\n  content: ReactNode\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      height: '100%',\n      flexWrap: 'nowrap'\n    },\n    header: {\n      width: '100%',\n      height: '50px',\n      borderBottom: '1px solid #eeeeee',\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      zIndex: 10\n    },\n    menu: {\n      marginRight: '10px'\n    },\n    body: {\n      width: '100%',\n      height: '100%',\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    sidebar: {\n      height: '100%',\n      width: '200px',\n      borderRight: '1px solid #eeeeee',\n      '& a': {\n        all: 'unset',\n        display: 'block',\n        width: '100%'\n      }\n    },\n    content: {\n      height: '100%',\n      flex: 1,\n      backgroundColor: 'white',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    modal: {\n      position: 'absolute',\n      width: 500,\n      backgroundColor: 'white',\n      border: '2px solid #000',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    modalTitle: {\n      width: '100%',\n      height: '50px',\n      fontSize: '18px',\n      borderBottom: '1px solid #cbcbcb',\n      lineHeight: '50px',\n      textAlign: 'center'\n    },\n    modalBody: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%'\n    },\n    gridItem: {\n      width: '100%',\n      textAlign: 'center'\n    },\n    textField: {\n      width: '80%',\n      height: '60px'\n    }\n  })\n)\n\nexport const Layout: React.FC<Props> = ({ content }) => {\n  const [isModal, setIsModal] = useState<boolean>(false)\n  const [changePasswordState, setChangePasswordstate] = useState<UserChangePasswordPayload>({\n    currentPassword: '',\n    newPassword: '',\n    checkNewPassword: ''\n  })\n  const [isDropdown, setIsDropdown] = useState<boolean>(false)\n  const anchorRef = useRef<HTMLButtonElement>(null)\n  const classes = useStyles()\n  const { data: meData } = useQuery<MeResponse>(ME)\n  const { data: localUserData, client } = useQuery<LocalUserInterface>(GET_LOCAL_USER)\n  const [changePassword] = useMutation<UserChangePasswordPayload>(USER_CHANGE_PASSWORD, { variables: changePasswordState })\n  const [setLocalState] = useMutation<SnackbarInterface>(SET_LOCAL_STATE)\n\n  useEffect(() => {\n    if (meData) {\n      const { me } = meData\n      const cachedUser = client.readQuery({\n        query: GET_LOCAL_USER\n      })\n      if (cachedUser.user.email === '') {\n        const currentUser = me\n        client.writeData({ data: { user: currentUser } })\n      }\n    }\n  }, [meData])\n\n  const prevOpen = React.useRef(isDropdown)\n  useEffect(() => {\n    if (prevOpen.current === true && isDropdown === false) {\n      anchorRef.current!.focus()\n    }\n    prevOpen.current = isDropdown\n  }, [isDropdown])\n\n  const onClickName = () => {\n    setIsDropdown(prevOpen => !prevOpen)\n  }\n\n  const onClickDropdownClose = (e: React.MouseEvent<EventTarget>) => {\n    if (anchorRef.current && anchorRef.current.contains(e.target as HTMLElement)) {\n      return\n    }\n    setIsDropdown(false)\n  }\n\n  const onClickModalOpen = () => {\n    setIsModal(true)\n  }\n\n  const onClickModalClose = () => {\n    setIsModal(false)\n  }\n\n  const onChangePasswordState = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target as HTMLInputElement\n    setChangePasswordstate(prevState => ({ ...prevState, [name]: value }))\n  }\n\n  const onClickModalConfirm = () => {\n    changePassword().then(() => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: 'Password changed!',\n          severity: 'success'\n        }\n      })\n      setIsModal(false)\n    }).catch(err => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: err.graphQLErrors[0].message,\n          severity: 'error'\n        }\n      })\n    })\n  }\n\n  const onClickLogout = () => {\n    (async function () {\n      await client.writeData({ data: LocalUserInitialState })\n      await localStorage.clear()\n      await history.push('/login')\n    })()\n  }\n\n  return <React.Fragment>\n    <Grid container className={classes.container}>\n      <Grid item className={classes.header}>\n        <Link to='/'><img src='static/image/logo.png' /></Link>\n        <React.Fragment>\n          <Button\n            ref={anchorRef}\n            aria-controls={isDropdown ? 'menu-list-grow' : undefined}\n            aria-haspopup='true'\n            onClick={onClickName}\n            className={classes.menu}\n          >\n            {localUserData && localUserData.user.name}님\n          </Button>\n          <Popper open={isDropdown} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n            {({ TransitionProps, placement }) => (\n              <Grow\n                {...TransitionProps}\n                style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n              >\n                <Paper>\n                  <ClickAwayListener onClickAway={onClickDropdownClose}>\n                    <MenuList id='menu-list-grow'>\n                      <MenuItem onClick={onClickModalOpen}>\n                        비밀번호 변경\n                      </MenuItem>\n                      <MenuItem onClick={onClickLogout}>\n                        로그아웃\n                      </MenuItem>\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n        </React.Fragment>\n      </Grid>\n      <Grid item className={classes.body}>\n        <Grid item xs={2} className={classes.sidebar}>\n          <Paper elevation={0}>\n            <MenuList>\n              <MenuItem>\n                <Link to='/'>근무 시간</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/holiday'>연차</Link>\n              </MenuItem>\n              <MenuItem>\n                <Link to='/meal'>식사</Link>\n              </MenuItem>\n              {localUserData && localUserData.user.level === 1 &&\n                <div>\n                  <Divider style={{ marginTop: '10px', marginBottom: '10px' }} />\n                  <MenuItem>\n                    <Link to='/register'>계정추가</Link>\n                  </MenuItem>\n                  <MenuItem>\n                    <Link to='/account'>계정관리</Link>\n                  </MenuItem>\n                </div>\n              }\n            </MenuList>\n          </Paper>\n        </Grid>\n        <Grid item xs={10} className={classes.content}>\n          {content}\n        </Grid>\n      </Grid>\n      <Modal\n        open={isModal}\n        onClose={onClickModalClose}\n      >\n        <Grid className={classes.modal}>\n          <Grid item className={classes.modalTitle}>비밀번호 변경</Grid>\n          <Box className={classes.modalBody}>\n            <Grid item className={classes.gridItem}>\n              <TextField\n                type='password'\n                name='currentPassword'\n                onChange={onChangePasswordState}\n                className={classes.textField}\n                required\n                label={'현재 비밀번호'}\n              />\n            </Grid>\n            <Grid item className={classes.gridItem}>\n              <TextField\n                type='password'\n                name='newPassword'\n                onChange={onChangePasswordState}\n                className={classes.textField}\n                required\n                label='변경할 비밀번호'\n              />\n            </Grid>\n            <Grid item className={classes.gridItem}>\n              <TextField\n                type='password'\n                name='checkNewPassword'\n                onChange={onChangePasswordState}\n                className={classes.textField}\n                required\n                label='비밀번호 확인'\n              />\n            </Grid>\n          </Box>\n          <Grid item className={classes.gridItem}>\n            <Button style={{ color: '#2b7bfc', fontSize: '16px' }} onClick={onClickModalClose}>취소</Button>\n            <Button style={{ color: '#2b7bfc', fontSize: '16px' }} onClick={onClickModalConfirm}>확인</Button>\n          </Grid>\n        </Grid>\n      </Modal>\n    </Grid>\n  </React.Fragment>\n}","import React from 'react'\nimport { TextField, Button, Container, CssBaseline, Typography, Paper } from '@material-ui/core'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\ninterface Props {\n  loginState: { email: string, password: string },\n  handleLoginState(e: React.ChangeEvent<HTMLInputElement>): void,\n  handleLogin(): void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%',\n      height: '100%'\n    },\n    paper: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: '5px'\n    },\n    form: {\n      width: '100%', // Fix IE 11 issue.\n      marginTop: theme.spacing(1),\n    },\n    submit: {\n      margin: theme.spacing(3, 0, 2),\n    },\n  }),\n)\n\nexport const Login: React.FC<Props> = (props) => {\n  const classes = useStyles()\n  const { loginState, handleLoginState, handleLogin } = props\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      handleLogin()\n    }\n  }\n  return <React.Fragment>\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.container}>\n      <CssBaseline />\n      <Paper className={classes.paper} elevation={3}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Deepbio-Family\n        </Typography>\n        <div className={classes.form}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            value={loginState.email}\n            onChange={handleLoginState}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            value={loginState.password}\n            onChange={handleLoginState}\n            onKeyDown={onKeyDown}\n          />\n          {/* <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          /> */}\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleLogin}\n          >\n            Sign In\n          </Button>\n          {/* <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid> */}\n        </div>\n      </Paper>\n    </Container>\n  </React.Fragment>\n}","export const formatDate = (date: Date) => {\n  const today = new Date(date)\n  const year = today.getFullYear()\n  let month = '' + (today.getMonth() + 1)\n  let day = '' + today.getDate()\n  month = month.length < 2 ? '0' + month : month\n  day = day.length < 2 ? '0' + day : day\n  return [year, month, day].join('-')\n}","export const stringToColor = (str: string) => {\n  let hash = 0\n  let i\n\n  for (i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n  }\n  let colors = []\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff\n    colors.push(value)\n  }\n  return `rgba(${colors.join(',')}, 0.3)`\n}","import axios, { AxiosRequestConfig } from 'axios'\n\nconst baseURL = `http://192.168.0.181:5000`\nconst baseConfig: AxiosRequestConfig = {\n  timeout: 20000,\n  withCredentials: true\n}\n\nconst axiosGet = (url: string, config?: AxiosRequestConfig) => {\n  return axios.create(baseConfig).get(url, config)\n}\n\nconst axiosPost = (url: string, requestBody?: any, config?: AxiosRequestConfig) => {\n  return axios.create(baseConfig).post(url, requestBody, config)\n}\n\n\nexport const slackAPI = (username: string) => axiosGet(`${baseURL}/slackId/${username}`)\n","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Box, Select, MenuItem } from '@material-ui/core'\nimport 'date-fns'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport { AccessDataItemState, UsersResponse, UserType, accessPayload, MeResponse } from '../../interfaces'\nimport { formatDate } from '../../utils'\n\ninterface Props {\n  accessDataList: AccessDataItemState[],\n  handleSearchState(startDate: string, endDate: string, userId: number): void,\n  searchState: accessPayload,\n  lastAccess: string,\n  usersData: UsersResponse | undefined,\n  meData: MeResponse | undefined\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      height: '80%',\n      width: '100%',\n      '&::-webkit-scrollbar': {\n        display: 'none !important'\n      }\n    },\n    table: {\n      overflowY: 'scroll',\n      '& th, td': {\n        textAlign: 'center'\n      },\n      '& .MuiTableRow-head': {\n        background: '#eee'\n      }\n    },\n    select: {\n      margin: '16px 0px 20px 8px',\n      height: '100%'\n    }\n  })\n)\n\nexport const Access: React.FC<Props> = (props) => {\n  const classes = useStyles()\n  const { accessDataList, handleSearchState, searchState, lastAccess, usersData, meData } = props\n  const { startDate, endDate, userId } = searchState\n  const localeOptions = { hour12: false, timeStyle: 'short' }\n\n  const onChangeStartDate = (date: Date | null) => {\n    if (date) {\n      const sDate = formatDate(date)\n      handleSearchState(sDate, endDate, userId)\n    }\n  }\n  const onChangeEndDate = (date: Date | null) => {\n    if (date) {\n      const eDate = formatDate(date)\n      handleSearchState(startDate, eDate, userId)\n    }\n  }\n\n  const onChangeUserId = (e: React.ChangeEvent<{ value: unknown }>) => {\n    const userId = e.target.value\n    handleSearchState(startDate, endDate, Number(userId))\n  }\n\n  return <React.Fragment>\n    <Box>\n      ※ 출입 기록은 한 시간 단위로 업데이트 됩니다. (최종 업데이트 시간 : {lastAccess})\n    </Box>\n    <Box>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"yyyy-MM-dd\"\n          margin=\"normal\"\n          label=\"From\"\n          value={new Date(startDate)}\n          onChange={onChangeStartDate}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"yyyy-MM-dd\"\n          margin=\"normal\"\n          label=\"To\"\n          value={new Date(endDate)}\n          onChange={onChangeEndDate}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n      </MuiPickersUtilsProvider>\n      {meData && meData.me.level === 1 &&\n        <Select\n          value={userId}\n          onChange={onChangeUserId}\n          className={classes.select}\n        >\n          {usersData && usersData.users.map((user: UserType) => {\n            return (\n              <MenuItem key={user.id} value={user.id}>{user.name}</MenuItem>\n            )\n          })}\n        </Select>\n      }\n    </Box>\n    <TableContainer component={Paper} className={classes.container}>\n      <Table stickyHeader className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell>날짜</TableCell>\n            <TableCell>요일</TableCell>\n            <TableCell>출근시간</TableCell>\n            <TableCell>퇴근시간</TableCell>\n            <TableCell>근무시간</TableCell>\n            <TableCell>외출/복귀</TableCell>\n            <TableCell>기타</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            Object.keys(accessDataList).map(dayIndex => {\n              if (accessDataList[dayIndex].dayOfTheWeek) {\n                return (\n                  <TableRow key={dayIndex} hover={true}>\n                    <TableCell component='th' scope='row'>\n                      {accessDataList[dayIndex].onTime.toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>{accessDataList[dayIndex].dayOfTheWeek}</TableCell>\n                    <TableCell>\n                      {accessDataList[dayIndex].onTime.toLocaleTimeString('ko-KR', localeOptions)}\n                    </TableCell>\n                    <TableCell>\n                      {accessDataList[dayIndex].offTime.toLocaleTimeString('ko-KR', localeOptions)}\n                    </TableCell>\n                    <TableCell>{accessDataList[dayIndex].workingTime}</TableCell>\n                    <TableCell>\n                      {\n                        typeof accessDataList[dayIndex].outTime === 'object'\n                        && accessDataList[dayIndex].outTime.toLocaleTimeString('ko-KR', localeOptions)\n                      }\n                        /\n                      {\n                        typeof accessDataList[dayIndex].inTime === 'object'\n                        && accessDataList[dayIndex].inTime.toLocaleTimeString('ko-KR', localeOptions)\n                      }\n                    </TableCell>\n                    <TableCell>{accessDataList[dayIndex].etc}</TableCell>\n                  </TableRow>\n                )\n              }\n            })\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </React.Fragment>\n}","import React, { useCallback } from 'react'\nimport { Box, Modal, Grid, Button, RadioGroup, Radio, FormControl, FormLabel, FormControlLabel, List, ListItem, ListItemText, Dialog, DialogTitle, DialogActions } from '@material-ui/core'\nimport CancelIcon from '@material-ui/icons/Cancel'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { Calendar, dateFnsLocalizer } from 'react-big-calendar'\nimport { format, parse, startOfWeek, getDay } from 'date-fns'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport { HolidaysDataItemState, HolidayUpsertPayload, HolidayTypes, MyHolidaysDataItemState, MyHolidayCountState } from '../../interfaces'\nconst locales = {\n  'ko': require('date-fns/locale/ko')\n}\ninterface Props {\n  holidaysDataList: HolidaysDataItemState[],\n  myHolidaysDataList: MyHolidaysDataItemState[],\n  myHolidayCountState: MyHolidayCountState,\n  handleSearchMonth(day: Date): void,\n  upsertHolidayState: HolidayUpsertPayload,\n  handleUpsertHolidayState(startDate: Date | string, endDate: Date | string, holidayType: HolidayTypes, holidayId?: number): void,\n  isModal: boolean,\n  isDialog: boolean,\n  handleModalClose(): void,\n  handleDialogClose(): void,\n  handleDialogConfirm(): void,\n  handleModalConfirm(): void,\n  handleMyHolidayDelete(holidayId: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      display: 'flex',\n      flexDirection: 'row',\n      width: '100%',\n      height: '100%'\n    },\n    calendar: {\n      width: '75%',\n      height: '90%'\n    },\n    box: {\n      display: 'flex',\n      flexDirection: 'column',\n      marginLeft: '2%',\n      width: '15%',\n      height: '90%',\n      fontSize: '12pt',\n      border: '1px solid black'\n    },\n    header: {\n      width: '100%',\n      height: '5%',\n      background: '#eee',\n      fontSize: '18pt',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    body: {\n      width: '100%',\n      height: '90%',\n      borderTop: '1px solid black',\n      borderBottom: '1px solid black',\n      '& .MuiListItem-root': {\n        '& .MuiSvgIcon-root': {\n          display: 'none'\n        }\n      },\n      '& .MuiListItem-root:hover': {\n        '& .MuiSvgIcon-root': {\n          display: 'inline'\n        }\n      },\n      overflow: 'scroll'\n    },\n    footer: {\n      display: 'flex',\n      alignItems: 'center',\n      height: '5%',\n      background: '#eee',\n      padding: '10px'\n    },\n    modal: {\n      position: 'absolute',\n      width: 500,\n      backgroundColor: 'white',\n      border: '2px solid #000',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    modalTitle: {\n      width: '100%',\n      height: '50px',\n      fontSize: '18px',\n      borderBottom: '1px solid #cbcbcb',\n      lineHeight: '50px',\n      textAlign: 'center'\n    },\n    modalBody: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      alignItems: 'center'\n    },\n  })\n)\n\nexport const Holiday: React.FC<Props> = (props) => {\n  const classes = useStyles()\n  const { holidaysDataList, myHolidaysDataList, myHolidayCountState, handleSearchMonth, upsertHolidayState, handleUpsertHolidayState, isModal, isDialog, handleModalClose, handleDialogClose, handleDialogConfirm, handleModalConfirm, handleMyHolidayDelete } = props\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  })\n\n  const onChangeStartDate = (date: Date | null) => {\n    if (date) {\n      handleUpsertHolidayState(date, upsertHolidayState.endDate, upsertHolidayState.holidayType, upsertHolidayState.holidayId)\n    }\n  }\n  const onChangeEndDate = (date: Date | null) => {\n    if (date) {\n      handleUpsertHolidayState(upsertHolidayState.startDate, date, upsertHolidayState.holidayType, upsertHolidayState.holidayId)\n    }\n  }\n  const onChangeHolidayType = (e: React.ChangeEvent<{ value: any }>) => {\n    const { value } = e.target\n    handleUpsertHolidayState(upsertHolidayState.startDate, upsertHolidayState.endDate, value, upsertHolidayState.holidayId)\n  }\n\n  const onChangeNavigate = (day: Date) => {\n    handleSearchMonth(day)\n  }\n\n  const onClickMyHoliday = useCallback((holidayId: number) => () => {\n    handleMyHolidayDelete(holidayId)\n  }, [])\n\n  return <React.Fragment>\n    <Box className={classes.container}>\n      <Calendar\n        selectable\n        className={classes.calendar}\n        localizer={localizer}\n        events={holidaysDataList}\n        views={['month']}\n        onNavigate={onChangeNavigate}\n        onSelectSlot={({ start, end }) => {\n          handleUpsertHolidayState(start, end, 'ALLDAY')\n        }}\n        onSelectEvent={(event => {\n          const { id, start, end, title, allDay } = event\n          let holidayType: HolidayTypes = ''\n          if (allDay) {\n            holidayType = 'ALLDAY'\n          } else {\n            holidayType = title.includes('오전') ? 'AM' : 'PM'\n          }\n          const endDate = new Date(end)\n          endDate.setDate(endDate.getDate() - 1)\n          handleUpsertHolidayState(start, endDate, holidayType, id)\n        })}\n        popup={true}\n      />\n      <Box className={classes.box}>\n        <Box className={classes.header}>연차 사용내역</Box>\n        <List component=\"nav\" className={classes.body}>\n          {myHolidaysDataList.map(data => {\n            return (\n              <ListItem button key={data.id} onClick={onClickMyHoliday(data.id)}>\n                <ListItemText primary={data.text} />\n                <CancelIcon />\n              </ListItem>\n            )\n          })}\n        </List>\n        <Box className={classes.footer}>\n          남은 연차 : {myHolidayCountState.annual}개 <br />\n          남은 대체휴무 : {myHolidayCountState.alternative}개\n        </Box>\n      </Box>\n    </Box>\n    <Modal\n      open={isModal}\n      onClose={handleModalClose}\n    >\n      <Grid className={classes.modal}>\n        <Grid item className={classes.modalTitle}>연차/반차 사용</Grid>\n        <Box className={classes.modalBody}>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"yyyy-MM-dd\"\n              margin=\"normal\"\n              label=\"From\"\n              value={new Date(upsertHolidayState.startDate)}\n              style={{ width: '90%' }}\n              onChange={onChangeStartDate}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n            <KeyboardDatePicker\n              disableToolbar\n              variant=\"inline\"\n              format=\"yyyy-MM-dd\"\n              margin=\"normal\"\n              label=\"To\"\n              value={new Date(upsertHolidayState.endDate)}\n              style={{ width: '90%' }}\n              onChange={onChangeEndDate}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n          </MuiPickersUtilsProvider>\n          <FormControl component=\"fieldset\" style={{ marginTop: '15px', width: '90%' }}>\n            <FormLabel component=\"legend\">종류</FormLabel>\n            <RadioGroup value={upsertHolidayState.holidayType} onChange={onChangeHolidayType} row style={{ width: '90%', marginBottom: '15px' }}>\n              <FormControlLabel value=\"ALLDAY\" control={<Radio />} label=\"연차\" />\n              <FormControlLabel value=\"AM\" control={<Radio />} label=\"오전반차\" />\n              <FormControlLabel value=\"PM\" control={<Radio />} label=\"오후반차\" />\n            </RadioGroup>\n          </FormControl>\n        </Box>\n        <Grid item style={{ width: '100%', textAlign: 'center' }}>\n          <Button style={{ color: '#2b7bfc', fontSize: '16px' }} onClick={handleModalClose}>취소</Button>\n          <Button style={{ color: '#2b7bfc', fontSize: '16px' }} onClick={handleModalConfirm}>확인</Button>\n        </Grid>\n      </Grid>\n    </Modal>\n    <Dialog\n      open={isDialog}\n      onClose={handleDialogClose}\n    >\n      <DialogTitle>연차/반차를 삭제 하시겠습니까?</DialogTitle>\n      <DialogActions>\n        <Button onClick={handleDialogClose} color=\"primary\">\n          취소\n        </Button>\n        <Button onClick={handleDialogConfirm} color=\"primary\">\n          삭제\n        </Button>\n      </DialogActions>\n    </Dialog>\n  </React.Fragment>\n}","import React, { useCallback } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Grid, Card, CardContent, CardActionArea } from '@material-ui/core'\nimport { RestaurantType, RestaurantResponse } from '../../interfaces'\nimport { stringToColor } from '../../utils'\n\ninterface Props {\n  restaurantData: RestaurantResponse | undefined,\n  handleSelect(restaurantId: number): void,\n  handleDelete(): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    titleContainer: {\n      margin: '-20px 0px -20px 0px'\n    },\n    deleteContainer: {\n      margin: '10px 0px 0px 0px'\n    }\n  })\n)\n\nconst RestaurantList: React.FC<Props> = (props) => {\n  const classes = useStyles()\n  const { restaurantData, handleSelect, handleDelete } = props\n\n  const onClickSelectCard = useCallback((restaurantId: number) => () => {\n    handleSelect(restaurantId)\n  }, [])\n\n  return <React.Fragment>\n    <Grid container direction='column'>\n      <Grid container direction='column'>\n        <Grid container>\n          {restaurantData && restaurantData.restaurants.map((restaurant: RestaurantType) => {\n            return (\n              <Grid item xs={2} key={`${restaurant.id}`}>\n                <Card style={{ background: stringToColor(restaurant.name) }}>\n                  <CardActionArea onClick={onClickSelectCard(restaurant.id)}>\n                    <CardContent>\n                      {restaurant.name}\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </Grid>\n            )\n          })}\n        </Grid>\n      </Grid>\n    </Grid>\n    <Grid container className={classes.deleteContainer}>\n      <Grid item xs={2}>\n        <Card style={{ background: 'rgba(255,0,0,0.7)' }}>\n          <CardActionArea onClick={handleDelete}>\n            <CardContent>삭제</CardContent>\n          </CardActionArea>\n        </Card>\n      </Grid>\n    </Grid>\n  </React.Fragment>\n}\n\nexport default React.memo(RestaurantList)","import React from 'react'\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@material-ui/core'\nimport { RestaurantType, MealDataListState, RestaurantResponse } from '../../interfaces'\n\ninterface Props {\n  restaurantData: RestaurantResponse | undefined,\n  mealByRestaurant: MealDataListState[]\n}\n\nconst MealList: React.FC<Props> = (props) => {\n  const { restaurantData, mealByRestaurant } = props\n  return <React.Fragment>\n    <TableContainer component={Paper}>\n      <Table stickyHeader>\n        <TableHead style={{ background: '#eee' }}>\n          <TableRow>\n            <TableCell style={{ width: '20%' }}>Restaurant</TableCell>\n            <TableCell style={{ width: '40%' }}>점심</TableCell>\n            <TableCell style={{ width: '40%' }}>저녁</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {restaurantData && restaurantData.restaurants.map((restaurant: RestaurantType) => {\n            const meal = mealByRestaurant.find(mbr => {\n              return Number(mbr.restaurantId) === Number(restaurant.id)\n            })\n            return (\n              <TableRow key={restaurant.id}>\n                <TableCell>{restaurant.name}</TableCell>\n                <TableCell>{meal && meal.lunch.join(', ')}</TableCell>\n                <TableCell>{meal && meal.dinner.join(', ')}</TableCell>\n              </TableRow>\n            )\n          })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  </React.Fragment>\n}\n\nexport default React.memo(MealList)","import React from 'react'\nimport { Box } from '@material-ui/core'\nimport RestaurantList from './RestaurantList'\nimport MealList from './MealList'\nimport { MealDataListState, RestaurantResponse } from '../../interfaces'\n\ninterface Props {\n  restaurantData: RestaurantResponse | undefined,\n  mealByRestaurant: MealDataListState[],\n  handleSelect(restaurantId: number): void,\n  handleDelete(): void\n}\n\nexport const Meal: React.FC<Props> = (props) => {\n  const { restaurantData, mealByRestaurant, handleSelect, handleDelete } = props\n  return <React.Fragment>\n    <Box style={{ width: '90%' }}>\n      <Box>\n        ※ 메뉴 선택 및 수정은 당일 정해진 시간에만 가능합니다.<br />\n        ※ 점심은 11시 50분까지, 저녁은 17시 50분까지 신청 해주세요.<br />\n          점심 : 10:00 ~ 14:00 <br />\n          저녁 : 16:00 ~ 20:00 <br />\n      </Box>\n      <RestaurantList\n        restaurantData={restaurantData}\n        handleSelect={handleSelect}\n        handleDelete={handleDelete}\n      />\n      <MealList\n        restaurantData={restaurantData}\n        mealByRestaurant={mealByRestaurant}\n      />\n    </Box>\n  </React.Fragment>\n}","import React, { useCallback } from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, Modal, RadioGroup, Radio, FormControl, FormLabel, FormControlLabel, Box, TextField } from '@material-ui/core'\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport { UserUpdatePayload, UsersResponse, UserType } from '../../interfaces'\nimport { formatDate } from '../../utils'\n\ninterface Props {\n  usersData: UsersResponse | undefined,\n  isModal: boolean,\n  handleModalClose(): void,\n  handleModalConfirm(): void,\n  updateUserState: UserUpdatePayload,\n  handleFetchUserState(userId: number): void,\n  handleUpdateUserState(name: string, value: any): void,\n  handleResetPassword(userId: number): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      display: 'flex',\n      flexDirection: 'row',\n      height: '90%'\n    },\n    table: {\n      overflowY: 'scroll',\n      '& th, td': {\n        textAlign: 'center'\n      },\n      '& .MuiTableRow-head': {\n        background: '#eee'\n      },\n      '& .MuiTableCell-root': {\n        padding: '8px'\n      },\n      '& .MuiInputBase-input': {\n        textAlign: 'center'\n      }\n    },\n    modal: {\n      position: 'absolute',\n      width: 500,\n      backgroundColor: 'white',\n      border: '2px solid #000',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      padding: '25px'\n    },\n    modalTitle: {\n      width: '100%',\n      height: '50px',\n      fontSize: '18px',\n      borderBottom: '1px solid #cbcbcb',\n      lineHeight: '50px',\n      textAlign: 'center'\n    },\n    modalBody: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%'\n    },\n  })\n)\n\nexport const Account: React.FC<Props> = (props) => {\n  const classes = useStyles()\n  const { usersData, isModal, handleModalClose, handleModalConfirm, updateUserState, handleFetchUserState, handleUpdateUserState, handleResetPassword } = props\n\n  const onClickModify = useCallback((userId: number) => () => {\n    handleFetchUserState(userId)\n  }, [])\n\n  const onChangeUpdateUserState = (e: React.ChangeEvent<any>) => {\n    const { name, value } = e.target as HTMLInputElement\n    handleUpdateUserState(name, value)\n  }\n\n  const onChangeEnterDate = (date: Date | null) => {\n    if (date) {\n      handleUpdateUserState('enterDate', formatDate(date))\n    }\n  }\n\n  const onChangeisJoinType = (e: React.ChangeEvent<{ value: any }>) => {\n    const { value } = e.target\n    handleUpdateUserState('isJoin', value === 'true')\n  }\n\n  const onClickResetPassword = ((userId: number) => () => {\n    handleResetPassword(userId)\n  })\n\n  return <React.Fragment>\n    <Grid container className={classes.container}>\n      <TableContainer component={Paper} className={classes.container}>\n        <Table stickyHeader className={classes.table}>\n          <TableHead style={{ background: '#eee', textAlign: 'center' }}>\n            <TableRow>\n              <TableCell style={{ width: '17%' }}>Email</TableCell>\n              <TableCell style={{ width: '10%' }}>이름</TableCell>\n              <TableCell style={{ width: '10%' }}>등급</TableCell>\n              <TableCell style={{ width: '10%' }}>연차</TableCell>\n              <TableCell style={{ width: '10%' }}>대체휴무</TableCell>\n              <TableCell style={{ width: '23%' }}>입사일</TableCell>\n              <TableCell style={{ width: '10%' }}>재직여부</TableCell>\n              <TableCell style={{ width: '10%' }}></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {usersData && usersData.users.map((user: UserType) => {\n              return (\n                <TableRow key={user.id} hover={true}>\n                  <TableCell>{user.email}</TableCell>\n                  <TableCell>{user.name}</TableCell>\n                  <TableCell>{user.level ? 'admin' : 'family'}</TableCell>\n                  <TableCell>{user.annual}</TableCell>\n                  <TableCell>{user.alternative}</TableCell>\n                  <TableCell>{user.enterDate.slice(0, 10)}</TableCell>\n                  <TableCell>{user.isJoin ? '재직중' : '퇴사'}</TableCell>\n                  <TableCell>\n                    <Button variant='contained' color='default' onClick={onClickModify(user.id)}>\n                      수정\n                  </Button>\n                  </TableCell>\n                </TableRow>\n              )\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Modal\n        open={isModal}\n        onClose={handleModalClose}\n      >\n        <Grid className={classes.modal}>\n          <Grid item className={classes.modalTitle}>계정 정보 수정</Grid>\n          <Box className={classes.modalBody}>\n            <TextField\n              type='text'\n              name='annual'\n              style={{ width: '100%' }}\n              value={updateUserState.annual}\n              onChange={onChangeUpdateUserState}\n              label='연차'\n              margin='normal'\n            />\n            <TextField\n              type='text'\n              name='alternative'\n              style={{ width: '100%' }}\n              value={updateUserState.alternative}\n              onChange={onChangeUpdateUserState}\n              label='대체휴무'\n              margin='normal'\n            />\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <KeyboardDatePicker\n                disableToolbar\n                variant='inline'\n                format='yyyy-MM-dd'\n                margin='normal'\n                label='입사일'\n                value={new Date(updateUserState.enterDate)}\n                onChange={onChangeEnterDate}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n            </MuiPickersUtilsProvider>\n            <FormControl component='fieldset' style={{ marginTop: '15px' }}>\n              <FormLabel component='legend'>재직여부</FormLabel>\n              <RadioGroup\n                value={updateUserState.isJoin}\n                onChange={onChangeisJoinType}\n                name='isJoin'\n                row style={{ width: '90%' }}\n              >\n                <FormControlLabel value={true} control={<Radio />} label='재직중' />\n                <FormControlLabel value={false} control={<Radio />} label='퇴사' />\n              </RadioGroup>\n            </FormControl>\n            <FormControl component='fieldset' style={{ marginTop: '15px' }}>\n              <FormLabel component='legend'>등급</FormLabel>\n              <RadioGroup\n                value={String(updateUserState.level)}\n                onChange={onChangeUpdateUserState}\n                name='level'\n                row style={{ width: '90%' }}\n              >\n                <FormControlLabel value='0' control={<Radio />} label='family' />\n                <FormControlLabel value='1' control={<Radio />} label='admin' />\n              </RadioGroup>\n            </FormControl>\n          </Box>\n          <Grid item style={{ width: '100%', textAlign: 'center' }}>\n            <Button style={{ color: '#2b7bfc', fontSize: '16px' }} onClick={handleModalClose}>닫기</Button>\n            <Button style={{ color: '#2b7bfc', fontSize: '16px' }} onClick={onClickResetPassword(updateUserState.userId)}>비밀번호 초기화</Button>\n            <Button style={{ color: '#2b7bfc', fontSize: '16px' }} onClick={handleModalConfirm}>수정</Button>\n          </Grid>\n        </Grid>\n      </Modal>\n    </Grid>\n  </React.Fragment>\n}","import React, { useEffect, useState } from 'react'\nimport { Access, Layout } from '../components'\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks'\nimport { ACCESS, LAST_ACCESS, USERS, ME } from '../graphql/queries'\nimport { accessResponse, AccessType, AccessDataItemState, accessPayload, LastAccessResponse, UsersResponse, MeResponse } from '../interfaces'\nimport { formatDate } from '../utils'\nimport { isToday } from 'date-fns/esm'\n\ninterface Props { }\n\nconst getThisWeek = () => {\n  const today = new Date()\n  const weekIndex = [0, 1, 2, 3, 4, 5, 6]\n  const dayOfWeekIndex = weekIndex[today.getDay()]\n  const thisWeekStartDate = new Date()\n  thisWeekStartDate.setDate(today.getDate() - dayOfWeekIndex + 1)\n  const thisWeekEndDate = new Date()\n  thisWeekEndDate.setDate(today.getDate() - dayOfWeekIndex + 7)\n\n  return {\n    thisWeekStartDate: formatDate(thisWeekStartDate),\n    thisWeekEndDate: formatDate(thisWeekEndDate)\n  }\n}\n\nconst workingTimeCalculator = (onTime: Date, offTime: Date, inTime: Date | string, outTime: Date | string) => {\n  let workingTime: number\n  if (outTime && inTime) {\n    workingTime = (offTime.getTime() - onTime.getTime() - new Date(inTime).getTime() + new Date(outTime).getTime()) / 1000 / 3600\n  } else {\n    workingTime = (offTime.getTime() - onTime.getTime()) / 1000 / 3600\n  }\n  const hours = Math.floor(workingTime)\n  const minutes = Math.floor((workingTime % 1) * 60)\n  return `${hours}시간 ${minutes}분`\n}\n\nexport const AccessContainer: React.FC<Props> = () => {\n  const [accessDataList, setAccessDataList] = useState<AccessDataItemState[]>([])\n  const [lastAccess, setLastAccess] = useState<string>('')\n  const { thisWeekStartDate, thisWeekEndDate } = getThisWeek()\n  const [searchState, setSearchState] = useState<accessPayload>({\n    startDate: thisWeekStartDate,\n    endDate: thisWeekEndDate,\n    userId: 0\n  })\n  const { data: usersData } = useQuery<UsersResponse>(USERS)\n  const [execute, { data: accessData }] = useLazyQuery<accessResponse, accessPayload>(ACCESS, {\n    variables: {\n      startDate: searchState.startDate,\n      endDate: searchState.endDate,\n      userId: searchState.userId\n    },\n    fetchPolicy: 'network-only'\n  })\n  const { data: lastAccessData } = useQuery<LastAccessResponse>(LAST_ACCESS)\n  const { data: meData } = useQuery<MeResponse>(ME)\n  const handleSearchState = (startDate: string, endDate: string, userId: number) => {\n    setAccessDataList([])\n    setSearchState({ startDate, endDate, userId })\n  }\n\n  useEffect(() => {\n    if (meData) {\n      const { id } = meData.me\n      setSearchState(prev => ({ ...prev, userId: id }))\n      execute()\n    }\n  }, [meData])\n\n  useEffect(() => {\n    if (lastAccessData) {\n      setLastAccess(lastAccessData.lastAccess.timestamp.toString().replace('T', ' ').split('.')[0])\n    }\n  }, [lastAccessData])\n\n  useEffect(() => {\n    if (accessData) {\n      setAccessDataList([])\n      const accessRawDataArray: Array<Array<AccessType>> = []\n      let accessRawData: Array<AccessType> = []\n      for (const accessLog of accessData.access) {\n        const { accessType, timestamp } = accessLog\n        if (isToday(new Date(timestamp))) {\n          if (accessRawData.length !== 0) {\n            accessRawDataArray.push(accessRawData)\n            accessRawData = []\n          }\n          if (accessRawDataArray[accessRawDataArray.length - 1] && isToday(new Date(accessRawDataArray[accessRawDataArray.length - 1][0].timestamp))) {\n            const temp = accessRawDataArray.pop()\n            if (temp) {\n              temp.push(accessLog)\n              accessRawDataArray.push(temp)\n            }\n          } else {\n            accessRawData.push(accessLog)\n            accessRawDataArray.push(accessRawData)\n            accessRawData = []\n          }\n        } else {\n          if (accessType === 'ON') {\n            if (accessRawData.length !== 0) {\n              accessRawDataArray.push(accessRawData)\n              accessRawData = []\n            }\n            accessRawData.push(accessLog)\n          } else if (accessType === 'OFF') {\n            accessRawData.push(accessLog)\n            accessRawDataArray.push(accessRawData)\n            accessRawData = []\n          } else {\n            accessRawData.push(accessLog)\n          }\n        }\n      }\n      const weekIndex = ['일', '월', '화', '수', '목', '금', '토']\n      for (const rawDataArray of accessRawDataArray) {\n        if (rawDataArray.length < 2 && rawDataArray[0].accessType === 'ACCESS') {\n          continue\n        }\n        const accessData: AccessDataItemState = {\n          dayOfTheWeek: '',\n          onTime: new Date(),\n          offTime: new Date(),\n          inTime: '',\n          outTime: '',\n          workingTime: '',\n          etc: ''\n        }\n        const firstAccess = rawDataArray[0]\n        const lastAccess = rawDataArray[rawDataArray.length - 1]\n        if (firstAccess.accessType !== 'ON') {\n          accessData.etc += '출근 기록 없음\\n'\n        }\n        if (lastAccess.accessType !== 'OFF') {\n          accessData.etc += '퇴근 기록 없음\\n'\n        }\n\n        for (const idx in rawDataArray) {\n          if (rawDataArray[idx].accessType === 'OUT') {\n            accessData.outTime = new Date(rawDataArray[idx].timestamp)\n            if (accessData.inTime === '' && Number(idx) !== rawDataArray.length) {\n              if (rawDataArray[Number(idx) + 1]) {\n                accessData.inTime = new Date(rawDataArray[Number(idx) + 1].timestamp)\n              }\n            }\n          } else if (rawDataArray[idx].accessType === 'IN') {\n            accessData.inTime = new Date(rawDataArray[idx].timestamp)\n            if (accessData.outTime === '') {\n              accessData.outTime = new Date(rawDataArray[Number(idx) - 1].timestamp)\n            }\n          }\n        }\n\n        accessData.onTime = new Date(firstAccess.timestamp)\n        accessData.dayOfTheWeek = weekIndex[accessData.onTime.getDay()]\n        accessData.offTime = new Date(lastAccess.timestamp)\n        const workingTime = workingTimeCalculator(accessData.onTime, accessData.offTime, accessData.inTime, accessData.outTime)\n        accessData.workingTime = workingTime\n        setAccessDataList(prev => [...prev, accessData])\n      }\n    }\n  }, [accessData])\n\n  return <React.Fragment>\n    <Layout content={\n      <Access\n        accessDataList={accessDataList}\n        lastAccess={lastAccess}\n        handleSearchState={handleSearchState}\n        searchState={searchState}\n        usersData={usersData}\n        meData={meData}\n      />\n    } />\n  </React.Fragment>\n}","import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { HOLIDAYS, MY_HOLIDAYS } from '../graphql/queries'\nimport { HOLIDAY_CREATE, HOLIDAY_UPDATE, HOLIDAY_DELETE } from '../graphql/mutations'\nimport { HolidaysPayload, HolidaysDataItemState, HolidaysResponse, MyHolidaysResponse, HolidayUpsertPayload, HolidayTypes, MyHolidaysDataItemState, MyHolidayCountState, HolidayDeletePayload } from '../interfaces'\nimport { SET_LOCAL_STATE, SnackbarInterface } from '../apollo/store'\nimport { Layout, Holiday } from '../components'\nimport { formatDate } from '../utils'\n\ninterface Props { }\n\nexport const HolidayContainer: React.FC<Props> = () => {\n  const [isModal, setIsModal] = useState<boolean>(false)\n  const [isDialog, setIsDialog] = useState<boolean>(false)\n  const [searchMonth, setsearchMonth] = useState(formatDate(new Date()).substring(0, 7))\n  const [upsertHolidayState, setUpsertHolidayState] = useState<HolidayUpsertPayload>({ holidayId: 0, startDate: '', endDate: '', holidayType: '' })\n  const [deleteHolidayId, setDeleteHolidayId] = useState<number>(0)\n  const [holidaysDataList, setHolidaysDataList] = useState<HolidaysDataItemState[]>([])\n  const [myHolidaysDataList, setMyHolidaysDataList] = useState<MyHolidaysDataItemState[]>([])\n  const [myHolidayCountState, setMyHolidayCountState] = useState<MyHolidayCountState>({ alternative: 0, annual: 0 })\n\n  const { data: myHolidaysData, refetch: myHolidaysRefetch } = useQuery<MyHolidaysResponse>(MY_HOLIDAYS, {\n    fetchPolicy: 'network-only'\n  })\n  const { data: holidaysData, refetch: holidaysRefetch } = useQuery<HolidaysResponse, HolidaysPayload>(HOLIDAYS, {\n    variables: {\n      searchMonth\n    },\n    fetchPolicy: 'network-only'\n  })\n  const [holidayCreate] = useMutation<{}, HolidayUpsertPayload>(HOLIDAY_CREATE, { variables: upsertHolidayState })\n  const [holidayUpdate] = useMutation<{}, HolidayUpsertPayload>(HOLIDAY_UPDATE, { variables: upsertHolidayState })\n  const [holidayDelete] = useMutation<{}, HolidayDeletePayload>(HOLIDAY_DELETE, {\n    variables: {\n      holidayId: deleteHolidayId\n    }\n  })\n  const [setLocalState] = useMutation<SnackbarInterface>(SET_LOCAL_STATE)\n\n  useEffect(() => {\n    if (holidaysData) {\n      setHolidaysDataList([])\n      for (const raw of holidaysData.holidays) {\n        const { id, startDate, endDate, holidayType, user } = raw\n        let prefix = ''\n        if (holidayType === 'ALLDAY') {\n          prefix = '[연차]'\n        } else if (holidayType === 'AM') {\n          prefix = '[오전]'\n        } else if (holidayType === 'PM') {\n          prefix = '[오후]'\n        }\n        setHolidaysDataList(prev => {\n          const result = [...prev, {\n            id,\n            title: `${prefix} ${user.name}`,\n            start: startDate,\n            end: endDate,\n            allDay: holidayType === 'ALLDAY' ? true : false\n          }]\n          return result\n        })\n      }\n    }\n  }, [holidaysData])\n\n  useEffect(() => {\n    if (myHolidaysData) {\n      setMyHolidaysDataList([])\n      setMyHolidayCountState({ alternative: 0, annual: 0 })\n      const { myHolidays, me } = myHolidaysData\n      setMyHolidayCountState(me)\n      for (const raw of myHolidays) {\n        const { id, startDate, endDate, holidayType } = raw\n        let prefix = ''\n        let text = ''\n        if (holidayType === 'ALLDAY') {\n          prefix = '[연차]'\n          text = `${prefix} ${formatDate(startDate)} ~ ${formatDate(endDate)}`\n        } else if (holidayType === 'AM') {\n          prefix = '[오전]'\n          text = `${prefix} ${formatDate(startDate)}`\n        } else if (holidayType === 'PM') {\n          prefix = '[오후]'\n          text = `${prefix} ${formatDate(startDate)}`\n        }\n        setMyHolidaysDataList(prev => {\n          const result = [...prev, {\n            id,\n            text\n          }]\n          return result\n        })\n      }\n    }\n  }, [myHolidaysData])\n\n  const handleSearchMonth = (day: Date) => {\n    const dateString = formatDate(day)\n    setsearchMonth(dateString.substring(0, 7))\n  }\n\n  const handleUpsertHolidayState = (startDate: Date, endDate: Date, holidayType: HolidayTypes, holidayId: number = 0) => {\n    const sDate = formatDate(startDate)\n    const eDate = formatDate(endDate)\n    setUpsertHolidayState({ holidayId, startDate: sDate, endDate: eDate, holidayType })\n    setIsModal(true)\n  }\n\n  const handleModalClose = () => {\n    setIsModal(false)\n  }\n\n  const handleModalConfirm = () => {\n    const mutater = upsertHolidayState.holidayId === 0 ? holidayCreate : holidayUpdate\n    mutater().then(() => {\n      holidaysRefetch()\n      myHolidaysRefetch()\n      setIsModal(false)\n    }).catch(err => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: err.graphQLErrors[0].message,\n          severity: 'error'\n        }\n      })\n    })\n  }\n\n  const handleMyHolidayDelete = (holidayId: number) => {\n    setDeleteHolidayId(holidayId)\n    setIsDialog(true)\n  }\n\n  const handleDialogClose = () => {\n    setIsDialog(false)\n  }\n\n  const handleDialogConfirm = () => {\n    holidayDelete().then(() => {\n      setIsDialog(false)\n      setDeleteHolidayId(0)\n      holidaysRefetch()\n      myHolidaysRefetch()\n    }).catch((err) => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: err.graphQLErrors[0].message,\n          severity: 'error'\n        }\n      })\n    })\n  }\n\n  return <React.Fragment>\n    <Layout content={\n      <Holiday\n        holidaysDataList={holidaysDataList}\n        myHolidaysDataList={myHolidaysDataList}\n        myHolidayCountState={myHolidayCountState}\n        handleSearchMonth={handleSearchMonth}\n        upsertHolidayState={upsertHolidayState}\n        handleUpsertHolidayState={handleUpsertHolidayState}\n        isModal={isModal}\n        isDialog={isDialog}\n        handleModalClose={handleModalClose}\n        handleDialogClose={handleDialogClose}\n        handleDialogConfirm={handleDialogConfirm}\n        handleModalConfirm={handleModalConfirm}\n        handleMyHolidayDelete={handleMyHolidayDelete}\n      />\n    } />\n  </React.Fragment>\n}","import React, { useState, useEffect } from 'react'\nimport { USER_LOGIN } from '../graphql/mutations'\nimport { useMutation } from '@apollo/react-hooks'\nimport { SET_LOCAL_STATE, SnackbarInterface } from '../apollo/store'\nimport { Login } from '../components'\nimport { history } from '../helpers'\nimport { LoginPayload } from '../interfaces'\n\ninterface Props { }\n\nexport const LoginContainer: React.FC<Props> = () => {\n  const [loginState, setLoginState] = useState<LoginPayload>({\n    email: '',\n    password: ''\n  })\n  const [login, { data }] = useMutation<LoginPayload>(USER_LOGIN, {\n    variables: loginState\n  })\n  const [setLocalState] = useMutation<SnackbarInterface>(SET_LOCAL_STATE)\n\n  const handleLoginState = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target as HTMLInputElement\n    setLoginState(prevState => ({ ...prevState, [name]: value }))\n  }\n\n  useEffect(() => {\n    if (data) {\n      history.push('/')\n    }\n  }, [data])\n\n  const handleLogin = () => {\n    login().catch(err => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: err.graphQLErrors[0].message,\n          severity: 'error'\n        }\n      })\n    })\n  }\n\n  return <React.Fragment>\n    <Login\n      loginState={loginState}\n      handleLoginState={handleLoginState}\n      handleLogin={handleLogin}\n    />\n  </React.Fragment>\n}","import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { RESTAURANTS, MEAL_LIST } from '../graphql/queries'\nimport { MEAL_UPSERT, MEAL_DELETE } from '../graphql/mutations'\nimport { Layout, Meal } from '../components'\nimport { RestaurantResponse, MealPayload, MealResponse, MealDataListState, MealUpsertPayload, MealDeletePayload, MealTypes } from '../interfaces'\nimport { SET_LOCAL_STATE, SnackbarInterface } from '../apollo/store'\nimport { formatDate } from '../utils'\n\ninterface Props { }\n\nexport const MealContainer: React.FC<Props> = () => {\n  const [mealByRestaurant, setMealByRestaurant] = useState<MealDataListState[]>([])\n  const [mealUpsertState, setMealUpsertState] = useState<MealUpsertPayload>({\n    date: '',\n    mealType: '',\n    restaurantId: 0\n  })\n  const [deleteState, setDeleteState] = useState<MealDeletePayload>({\n    date: '',\n    mealType: '',\n  })\n  const { data: restaurantData } = useQuery<RestaurantResponse>(RESTAURANTS)\n  const { data: mealDataList, refetch } = useQuery<MealResponse, MealPayload>(MEAL_LIST, {\n    variables: {\n      date: formatDate(new Date())\n    },\n    fetchPolicy: 'network-only'\n  })\n  const [mealUpsert] = useMutation<{}, MealUpsertPayload>(MEAL_UPSERT, { variables: mealUpsertState })\n  const [mealDelete] = useMutation<{}, MealDeletePayload>(MEAL_DELETE, { variables: deleteState })\n  const [setLocalState] = useMutation<SnackbarInterface>(SET_LOCAL_STATE)\n\n  useEffect(() => {\n    if (mealDataList) {\n      setMealByRestaurant([])\n      for (const mealData of mealDataList.mealList) {\n        const mealRawData: MealDataListState = {\n          restaurantId: 0,\n          lunch: [],\n          dinner: []\n        }\n        for (const meal of mealData) {\n          mealRawData.restaurantId = meal.restaurantId\n          if (meal.mealType === 'LUNCH') {\n            mealRawData.lunch.push(meal.user.name)\n          } else {\n            mealRawData.dinner.push(meal.user.name)\n          }\n        }\n        setMealByRestaurant(prev => [...prev, mealRawData])\n      }\n    }\n  }, [mealDataList])\n\n  useEffect(() => {\n    if (mealUpsertState.date !== '') {\n      mealUpsert().then(() => {\n        refetch()\n      })\n    }\n  }, [mealUpsertState])\n\n  useEffect(() => {\n    if (deleteState.date !== '') {\n      mealDelete().then(() => {\n        refetch()\n      })\n    }\n  }, [deleteState])\n\n  const handleSelect = (restaurantId: number) => {\n    const currentHours = new Date().getHours()\n    let mealType: MealTypes = ''\n    if (currentHours >= 10 && currentHours < 14) {\n      mealType = 'LUNCH'\n    } else if (currentHours >= 16 && currentHours < 20) {\n      mealType = 'DINNER'\n    }\n    if (mealType !== '') {\n      setMealUpsertState({\n        date: formatDate(new Date()),\n        mealType,\n        restaurantId\n      })\n    } else {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: '메뉴 선택은 당일 정해진 시간에만 가능합니다.',\n          severity: 'error'\n        }\n      })\n    }\n  }\n\n  const handleDelete = () => {\n    const currentHours = new Date().getHours()\n    let mealType: MealTypes = ''\n    if (currentHours >= 10 && currentHours < 14) {\n      mealType = 'LUNCH'\n    } else if (currentHours >= 16 && currentHours < 20) {\n      mealType = 'DINNER'\n    }\n    if (mealType !== '') {\n      setDeleteState({\n        date: formatDate(new Date()),\n        mealType,\n      })\n    } else {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: '메뉴 선택은 당일 정해진 시간에만 가능합니다.',\n          severity: 'error'\n        }\n      })\n    }\n  }\n\n  return <React.Fragment>\n    <Layout content={\n      <Meal\n        restaurantData={restaurantData}\n        mealByRestaurant={mealByRestaurant}\n        handleSelect={handleSelect}\n        handleDelete={handleDelete}\n      />\n    } />\n  </React.Fragment>\n}","import React from 'react'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { TextField, Grid, Button } from '@material-ui/core'\nimport { UserCreatePayload } from '../../interfaces'\n\n\ninterface Props {\n  createUserState: UserCreatePayload,\n  handleCreateUserState(name: string, value: string): void,\n  handleUserCreate(): void,\n  findSlackId(username: string): void\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    registerContainer: {\n      width: '500px',\n      display: 'flex',\n      flexDirection: 'column',\n      paddingLeft: '30px',\n      paddingRight: '30px',\n      border: '1px solid #000',\n      height: '500px'\n    },\n    title: {\n      width: '100%',\n      height: '50px',\n      fontSize: '18px',\n      lineHeight: '50px',\n      textAlign: 'center'\n    },\n    item: {\n      width: '100%',\n      textAlign: 'center'\n    },\n    slackButton: {\n      width: '40%',\n      padding: 0\n    }\n  })\n)\n\nconst Register: React.FC<Props> = (props) => {\n  const classes = useStyles()\n  const { createUserState, handleCreateUserState, handleUserCreate, findSlackId } = props\n\n  const onChangeCreateUserState = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target as HTMLInputElement\n    handleCreateUserState(name, value)\n  }\n\n  const onClickFindSlackId = () => {\n    const username = createUserState.email.split('@')[0]\n    findSlackId(username)\n  }\n\n  return <React.Fragment>\n    <Grid container className={classes.registerContainer}>\n      <Grid item className={classes.title}>계정 생성</Grid>\n      <Grid item className={classes.item}>\n        <TextField\n          type='text'\n          name='name'\n          style={{ width: '100%' }}\n          value={createUserState.name}\n          onChange={onChangeCreateUserState}\n          required\n          label='Name'\n        />\n      </Grid>\n      <Grid item className={classes.item}>\n        <TextField\n          type='text'\n          name='email'\n          style={{ width: '100%' }}\n          value={createUserState.email}\n          onChange={onChangeCreateUserState}\n          required\n          label='Email'\n        />\n      </Grid>\n      <Grid item className={classes.item} style={{ display: 'flex' }}>\n        <TextField\n          type='text'\n          name='slackId'\n          style={{ width: '60%' }}\n          value={createUserState.slackId}\n          required\n          label='Slack ID'\n          disabled\n        />\n        <Button variant='contained' color='default' className={classes.slackButton} onClick={onClickFindSlackId}>\n          Slack ID 찾기\n        </Button>\n      </Grid>\n      <Grid item style={{ textAlign: 'right', marginTop: '20px' }}>\n        <Button variant='contained' color='primary' onClick={handleUserCreate}>계정생성</Button>\n      </Grid>\n    </Grid>\n  </React.Fragment>\n}\n\nexport default React.memo(Register)","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/react-hooks'\nimport { USER_CREATE } from '../graphql/mutations'\nimport { UserType, UserCreatePayload } from '../interfaces'\nimport { SET_LOCAL_STATE, SnackbarInterface } from '../apollo/store'\nimport { Layout } from '../components'\nimport Register from '../components/Register/Register'\nimport { slackAPI } from '../utils'\n\ninterface Props { }\n\nexport const RegisterContainer: React.FC<Props> = () => {\n  const [createUserState, setCreateUserState] = useState<UserCreatePayload>({ name: '', email: '', slackId: '' })\n  const [userCreate] = useMutation<UserType, UserCreatePayload>(USER_CREATE)\n\n  const [setLocalState] = useMutation<SnackbarInterface>(SET_LOCAL_STATE)\n\n  const handleCreateUserState = (name: string, value: string) => {\n    setCreateUserState(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleUserCreate = () => {\n    let message: string, severity: string\n    userCreate({ variables: createUserState }).then(() => {\n      message = '계정이 생성되었습니다.'\n      severity = 'success'\n    }).catch(err => {\n      message = err.graphQLErrors[0].message\n      severity = 'error'\n    }).finally(() => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message,\n          severity\n        }\n      })\n    })\n  }\n\n  const findSlackId = (username: string) => {\n    slackAPI(username).then((res) => {\n      const { id } = res.data\n      handleCreateUserState('slackId', id)\n    }).catch((err) => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: 'Network error. Please contact system administrator.',\n          severity: 'error'\n        }\n      })\n    })\n  }\n\n\n  return <React.Fragment>\n    <Layout content={\n      <Register\n        createUserState={createUserState}\n        handleCreateUserState={handleCreateUserState}\n        handleUserCreate={handleUserCreate}\n        findSlackId={findSlackId}\n      />\n    } />\n  </React.Fragment>\n}","import React, { useState, useEffect } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/react-hooks'\nimport { USERS, USER } from '../graphql/queries'\nimport { USER_RESET_PASSWORD, USER_UPDATE } from '../graphql/mutations'\nimport { UserType, UsersResponse, UserResponse, UserPayload, UserUpdatePayload } from '../interfaces'\nimport { SET_LOCAL_STATE, SnackbarInterface } from '../apollo/store'\nimport { Account, Layout } from '../components'\nimport { formatDate } from '../utils'\n\ninterface Props { }\n\nexport const AccountContainer: React.FC<Props> = () => {\n  const [isModal, setIsModal] = useState<boolean>(false)\n  const [updateUserState, setUpdateUserState] = useState<UserUpdatePayload>({\n    userId: 0, annual: 0, alternative: 0, enterDate: '', isJoin: true, level: 0\n  })\n\n  const [userFetch, { data: userData }] = useLazyQuery<UserResponse, UserPayload>(USER, {\n    fetchPolicy: 'network-only'\n  })\n  const { data: usersData, refetch: usersRefetch } = useQuery<UsersResponse>(USERS)\n  const [userUpdate] = useMutation<UserType, UserUpdatePayload>(USER_UPDATE)\n  const [userResetPassword] = useMutation<{}, UserPayload>(USER_RESET_PASSWORD)\n  const [setLocalState] = useMutation<SnackbarInterface>(SET_LOCAL_STATE)\n\n  useEffect(() => {\n    if (userData) {\n      const { id, annual, alternative, enterDate, isJoin, level } = userData.user\n      const eDate = formatDate(new Date(enterDate))\n      setUpdateUserState({ userId: id, annual, alternative, enterDate: eDate, isJoin, level })\n      setIsModal(true)\n    }\n  }, [userData])\n\n  const handleFetchUserState = (userId: number) => {\n    userFetch({ variables: { userId } })\n  }\n\n  const handleResetPassword = (userId: number) => {\n    let message: string, severity: string\n    userResetPassword({ variables: { userId } }).then(() => {\n      message = '비밀번호가 초기화 되었습니다.'\n      severity = 'success'\n    }).catch(err => {\n      message = err.graphQLErrors[0].message\n      severity = 'error'\n    }).finally(() => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message,\n          severity\n        }\n      })\n    })\n  }\n\n  const handleUpdateUserState = (name: string, value: any) => {\n    setUpdateUserState(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleModalClose = () => {\n    setIsModal(false)\n  }\n\n  const handleModalConfirm = () => {\n    userUpdate({ variables: updateUserState }).then(() => {\n      setIsModal(false)\n      usersRefetch()\n    }).catch(err => {\n      setLocalState({\n        variables: {\n          isOpen: true,\n          message: err.graphQLErrors[0].message,\n          severity: 'error'\n        }\n      })\n    })\n  }\n\n  return <React.Fragment>\n    <Layout content={\n      <Account\n        usersData={usersData}\n        isModal={isModal}\n        handleModalClose={handleModalClose}\n        handleModalConfirm={handleModalConfirm}\n        updateUserState={updateUserState}\n        handleFetchUserState={handleFetchUserState}\n        handleUpdateUserState={handleUpdateUserState}\n        handleResetPassword={handleResetPassword}\n      />\n    } />\n  </React.Fragment>\n}","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { GET_LOCAL_STATE, LocalStateInterface } from './apollo/store/base'\nimport { Snackbar } from '@material-ui/core'\nimport { Alert } from '@material-ui/lab'\nimport { Router, Route, Switch } from 'react-router-dom'\nimport { AccessContainer, HolidayContainer, LoginContainer, MealContainer, RegisterContainer, AccountContainer } from './containers'\nimport { ProtectedRoute, AdminPageRoute } from './components'\nimport { history } from './helpers'\nimport './App.css'\n\nexport const App: React.FC = () => {\n  const { data: localStateData, client } = useQuery<LocalStateInterface>(GET_LOCAL_STATE)\n  const handleSnackbarClose = (e?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return\n    }\n    client.writeData({\n      data: {\n        snackbar: {\n          isOpen: false\n        }\n      }\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <Router history={history}>\n        <Switch>\n          <ProtectedRoute exact path='/' component={AccessContainer} />\n          <ProtectedRoute exact path='/holiday' component={HolidayContainer} />\n          <ProtectedRoute exact path='/meal' component={MealContainer} />\n          <AdminPageRoute exact path='/register' component={RegisterContainer} />\n          <AdminPageRoute exact path='/account' component={AccountContainer} />\n          <Route path='/login' component={LoginContainer} />\n        </Switch>\n      </Router>\n      {localStateData &&\n        <Snackbar open={localStateData.snackbar.isOpen} autoHideDuration={5000} onClose={handleSnackbarClose}>\n          <Alert severity={localStateData.snackbar.severity} onClose={handleSnackbarClose}>\n            {localStateData.snackbar.message}\n          </Alert>\n        </Snackbar>\n      }\n    </React.Fragment>\n  )\n}","import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\nimport introspectionResult from './fragmentTypes'\nimport { HttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloLink } from 'apollo-link'\nimport { onError } from 'apollo-link-error'\nimport { JWT, GRAPHQL_ENDPOINT } from './config'\nimport { GET_LOCAL_USER, LocalUserInitialState, LocalInitialState, SetLocalState } from './store'\n\nimport { history } from '../helpers'\nimport decode from 'jwt-decode'\n\n// const fragmentMatcher = new IntrospectionFragmentMatcher({\n//   // introspectionQueryResultData: introspectionResult\n//   introspectionQueryResultData: {\n//     __schema: {\n//       types: []\n//     }\n//   }\n// })\n\nconst cache = new InMemoryCache({\n  // dataIdFromObject: e => `${e.__typename}_${e.id}` || null,\n  freezeResults: true,\n  addTypename: false,\n  // fragmentMatcher\n})\n\nconst initialState = {\n  ...LocalUserInitialState,\n  ...LocalInitialState\n}\n\ncache.writeData({ data: initialState })\n\nconst opts = {\n  credentials: 'include',\n  // headers: {\n  // }\n}\n\nconst httpLink = new HttpLink({\n  uri: GRAPHQL_ENDPOINT,\n  ...opts\n})\n\nconst authMiddlewareLink = setContext((_, { headers }) => {\n  let token = localStorage.getItem(JWT.LOCAL_STORAGE.TOKEN.NAME) || null\n  const refreshToken = localStorage.getItem(JWT.LOCAL_STORAGE.REFRESH_TOKEN.NAME) || null\n  if (token && refreshToken) {\n    let decodedToken: any\n    try {\n      decodedToken = decode(token)\n    } catch (Exception) {\n      localStorage.clear()\n      history.push('/login')\n    }// invalid access token\n    const currentTime = Date.now().valueOf() / 1000\n    if (currentTime > decodedToken.exp) {\n      let decodedRefreshToken: any\n      try {\n        decodedRefreshToken = decode(refreshToken)\n      } catch (Exception) {\n        localStorage.clear()\n        history.push('/login')\n      }// invalid refresh token\n      if (currentTime > decodedRefreshToken.exp) {\n        localStorage.clear()\n        history.push('/login')\n      }// access & refresh token expired\n      const REFRESH_MUTATION = `\n        mutation {\n          userRefresh{\n            access\n          }\n        }\n      `\n      const refreshOpts = {\n        method: 'POST',\n        headers: {\n          authorization: `Bearer ${refreshToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ query: REFRESH_MUTATION })\n      }\n      return fetch(GRAPHQL_ENDPOINT, refreshOpts)\n        .then(res => {\n          return res.json()\n        })\n        .then(refreshData => {\n          const { access } = refreshData.data.userRefresh\n          localStorage.setItem(JWT.LOCAL_STORAGE.TOKEN.NAME, access)\n          token = access\n          console.log('REFRESHED')\n          return {\n            headers: {\n              ...headers,\n              authorization: token ? `Bearer ${token}` : '',\n            }\n          }\n        })\n        .catch(e => {\n          console.log(e)\n        })\n      // access token expired\n    }\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : '',\n      }\n    }\n  } else {\n    localStorage.clear()\n    history.push('/login')\n  }\n})\n\nconst afterwareLink = new ApolloLink((operation, forward) =>\n  forward(operation).map(response => {\n    const { data } = response\n    if (data) {\n      const { userLogin } = data\n      if (userLogin) {\n        const { access, refresh, user } = userLogin\n        if (access) {\n          localStorage.setItem(JWT.LOCAL_STORAGE.TOKEN.NAME, access)\n        }\n        if (refresh) {\n          localStorage.setItem(JWT.LOCAL_STORAGE.REFRESH_TOKEN.NAME, refresh)\n        }\n        if (user) {\n          localStorage.setItem('currentUser', JSON.stringify(user))\n          cache.writeData({ data: { user } })\n        }\n      }\n    }\n    return response\n  })\n)\n\nconst errorLink = onError(({ graphQLErrors, networkError, response, operation }) => {\n  if (graphQLErrors) {\n    for (const error of graphQLErrors) {\n      if (error.message.includes('Signature')) {\n        localStorage.clear()\n        history.push('/login')\n      }// invalid signature\n      console.error(\n        `[GraphQL error]: Message: ${error.message}, Location: ${error.locations}, Path: ${error.path}`,\n        operation,\n        response\n      )\n    }\n  }\n  if (networkError) {\n    console.error(`[Network error]: ${networkError}`, operation, response)\n  }\n})\n\nconst links = ApolloLink.from([errorLink, afterwareLink, authMiddlewareLink, httpLink])\n\nexport const client = new ApolloClient({\n  cache,\n  link: links,\n  connectToDevTools: true,\n  queryDeduplication: false,\n  assumeImmutableResults: true,\n  resolvers: {\n    Mutation: {\n      ...SetLocalState\n    }\n    // for cache(local state) mutation\n  }\n})\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\n\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { client } from './apollo/client'\nimport dotenv from 'dotenv'\nimport './index.css'\ndotenv.config()\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}